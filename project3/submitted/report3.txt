1. Enter the number of hours it took you to complete the project between
   the <<< and >>> signs below (eg, <<<10>>>).

   <<<64>>>
   
2. Enter the difficulty level (1: very easy; 5: very difficult) of the project
   between the <<< and >>> signs below (eg, <<<3>>>).

   <<<4>>>

3. Provide a short description of how you approached each problem, issues you 
   encountered, and how you resolved those issues.

   Problem 1 (Long and Double Basic Types): Fairly simple. I just edited the
   seeBasicType, seeReferenceType, basicType and literal methods in Parser.java.
   I added Type.java to include Long and Double and created literal files for 
   those types. 

   Problem 2 (Operators): For this problem, I looked at several functions in 
   Parser.java to see what operators I need to add. The operators I added are 
   "-=", "*=", "/=", "%=", "&=", "!=", "|=", "^=", ">>=", ">>>=", "<<=", "||", 
   "<", and ">=". I edited the respective files according to which function I 
   edited. The only problem I ran into was that the "++" and "--" operator 
   didn't have both post and prefix implement. So I edited JUnaryExpression to 
   make sure it both post and pre increment and decrement. Most functions added 
   files are based off functions that already exit in those file. 
   
   Problem 3 (Conditional Expression): A little bit more tricky. I tried 
   making another level for just conditionalExpression (same with conditionalOR) 
   but I kept running into issues so I ended up adding it to 
   conditionalAndExpression and it worked. The JTernaryOp class and 
   JTernaryExpression file are heavily based on JAndOp class and 
   JBinaryExpression file.

   Problem 4 (Switch Statement): I went at this problem with a simple way of
   thinking. I sort brute force this to work. I thought of added if else 
   statement for key words like CASE, SWITCH or BREAK and what has follows 
   after. Then I made the respected class files for them.

   Problem 5 (Do-While Statement): Simple way of implementing but I ran into 
   a an error that says "Literal sought where = found" on line 8 of the test 
   file. This implies there's something wrong with the operators in the 
   relationalExpression() method of Parser.java. I pass the test for operators 
   so the comparison operators should work so I'm not sure what's causing the 
   problem. I tried moving the classes around in JComparison then making their
   own files but that hasn't shown me any incorrect implementation for these 
   operators. 
   
   Problem 6 (For Statement): Same error as the last problem. Looking at the 
   statement level in the pdf, I know the for statement has three outcomes. 
   One that was initialized and needs to be update (forUpdate), another that 
   was just initialized (forInit), and no initialization (expression). So I made
   JForStatement and JForUpdateStatement both based off of JIfStatement. 

   Problem 7 (Exception Handlers): Similar approach as problem 4. I mainly added 
   to the statement function in Parser.java and made the respective files. 
   I had more issues supporting THROWS. I had to changed memberDecl function in 
   Parser.java to recognize THROWS and change JConstructionDeclaration and 
   JMethodDeclaration to include up to two exceptions. 

   Problem 8 (Interface Type Declaration): I look at how classDeclaration was 
   made in Parser.java and used that as a model to make interfaceDeclaration,
   interfaceBody, and interfaceMemberDecl. I also edited TypeDeclaration
   to recognize INTERFACES and call fo an interfaceDeclaration and changed 
   classDeclaration to recognize IMPLEMENTS. When I made JInterfaceDeclaration 
   I had some minor errors because I wasn't following JClassDeclaration closely
   enough.

4. Did you receive help from anyone? List their names, status (classmate, 
   CS451/651 grad, TA, other), and the nature of help received.

   Name               Status       Help Received
   ----               ------       -------------

   ...                ...          ...

5. List any other comments here. Feel free to provide any feedback on how
   much you learned from doing the assignment, and whether you enjoyed
   doing it.
   This project requirement more attention and even more time than the previous 
   projects. I think should be mentioned for future classes especially if 
   there are any students who also work like myself.
   ...
