1. Enter the number of hours it took you to complete the project between
   the <<< and >>> signs below (eg, <<<10>>>).

   <<<16>>>
   
2. Enter the difficulty level (1: very easy; 5: very difficult) of the project
   between <<< and >>> signs below (eg, <<<3>>>).

   <<<3.5>>>

3. Provide a short description of how you approached each problem, issues you 
   encountered, and how you resolved those issues.

   Problem 1 (Multiline Comment): I had some minor difficulties with this 
   problem. I initially had it working with both MultiLineComment test files 
   but I may have edited it while I was wondering why I wasn't passing any
   gradescope tests before realizing I updated j--.tar instead of j--.tar.gz.
   I realized I wasn't taking into account all the possible multi-line comments
   so I added a while ch == '*' loop for multi-line comments with multiple
   "*" after "/*".

   Problem 2 (Reserved Words): This was one of the easier problems in the 
   assignment to do. The first thing I did was wadded the reserved words into 
   TokenInfo.java. After I added those keywords into Scanner.java.

   Problem 3 (Operators): This was somewhat annoying to do but only because
   I had to closely pay attention to what operators weren't already added
   from the previous project. I took a little longer to make sure I didn't 
   add any operators twice in TokenInfo then added new cases and to existing
   cases to recognize the new operators. The only cases I had to be careful
   with were the ones involving '>' and '<' but adding comments during it helped
   me keep track of what operator should be recognized.
   
   Problem 4 (Separators): Most of these seperator were already added. I only
   added ':' (COLON). Easiest problem of the whole assignment.

   Problem 5 (Literals): This problem proved to be fairly more difficult. I 
   edited the while loop that checks for digits. After the while loop has read
   and appended the last digit to the string buffer, it checks if the next 
   character is an l or L and return what's in the string buffer as a long 
   literal. For a double literal it was similar. After the while loop reads a 
   digit, it should checks for ch is equal to ".", e, E, d or D. If so it'll 
   append the rest of the characters if they are digits, e or E, d or E, + or -
   and will stop until white space is read. I did have a problem with double
   literals starting with a dot so I just edit the '.' case to check if certain
   characters followed and return a string buffer as a double literal if so.

4. Did you receive help from anyone? List their names, status (classmate, 
   CS451/651 grad, TA, other), and the nature of help received.

   Name               Status       Help Received
   ----               ------       -------------
   Swami              Professor    I came during office hours to check why my
                                   code wasn't passing any of the gradescope 
                                   test despite passing all the given project
                                   2 tests. I was updating j--.tar instead
                                   of j--.tar.gz.
   ...                ...          ...

5. List any other comments here. Feel free to provide any feedback on how
   much you learned from doing the assignment, and whether you enjoyed
   doing it.
   
   I enjoyed the multiline-comment problem and the operator cases involing
   multiple levels of a character like ">>>=" or "<<=". They just required
   more attention and proved a little bit more difficult than the other 
   problems. Only thing I would change is the instruction to update j--.tar.gz
   instead of j--.tar in the project 2 pdf since I was updating j--.tar
   instead of .gz.
   ...
